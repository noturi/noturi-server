// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  GOOGLE
  APPLE
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String         @id @default(uuid())
  nickname      String
  email         String         @unique
  name          String?        // 실제 이름 (OAuth에서 가져옴)
  
  // OAuth 인증 (nullable - 어드민은 로컬 인증 가능)
  providers     AuthProvider[]
  providerId    String?        @unique
  avatarUrl     String?
  
  // 로컬 인증 (어드민용)
  password      String?        // bcrypt 해시
  
  isStatsPublic Boolean        @default(false)
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  categories    Category[]
  memos         Memo[]
  refreshTokens RefreshToken[]
  calendarMemos CalendarMemo[]

  @@index([providerId])
  @@index([email])
  @@map("users")
}

model Category {
  id        String          @id @default(uuid())
  name      String
  color     String?         // UI 색상용
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  memos     Memo[]
  fields    CategoryField[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@map("categories")
}

model CategoryField {
  id         String    @id @default(uuid())
  name       String    // ex: 감독, 저자
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  memoFields MemoCustomField[]

  @@unique([categoryId, name])
  @@index([categoryId])
  @@map("category_fields")
}

model Memo {
  id             String             @id @default(uuid())
  title          String             // 필수
  content        String?            // 본문 (optional)
  rating         Decimal?           @db.Decimal(2,1) // 1.0~5.0, 0.5단위 (optional)
  experienceDate DateTime?          // 경험 날짜 (optional)

  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  category       Category?          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String?

  customFields   MemoCustomField[]

  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([rating])
  @@index([createdAt])
  @@index([userId, rating])
  @@index([userId, categoryId])
  @@map("memos")
}

model MemoCustomField {
  id              String         @id @default(uuid())
  value           String         

  memo            Memo           @relation(fields: [memoId], references: [id], onDelete: Cascade)
  memoId          String
  categoryField   CategoryField  @relation(fields: [categoryFieldId], references: [id], onDelete: Cascade)
  categoryFieldId String

  @@unique([memoId, categoryFieldId])
  @@index([memoId])
  @@map("memo_custom_fields")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@index([userId])
  @@map("refresh_tokens")
}

model DefaultCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  color       String
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("default_categories")
}

enum NotificationTime {
  ONE_MINUTE_BEFORE
  FIVE_MINUTES_BEFORE
  TEN_MINUTES_BEFORE
  FIFTEEN_MINUTES_BEFORE
  THIRTY_MINUTES_BEFORE
  ONE_HOUR_BEFORE
  TWO_HOURS_BEFORE
  THREE_HOURS_BEFORE
  ONE_DAY_BEFORE
  TWO_DAYS_BEFORE
  THREE_DAYS_BEFORE
  ONE_WEEK_BEFORE
}

model CalendarMemo {
  id              String           @id @default(uuid())
  title           String
  startDate       DateTime         // 시작 날짜/시간
  endDate         DateTime         // 끝 날짜/시간
  hasNotification Boolean          @default(false)
  notifyBefore    NotificationTime? // 시작 날짜 기준 알림 시점

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
  @@index([startDate])
  @@index([userId, startDate])
  @@map("calendar_memos")
}
